library(SnowballC)
library(ggthemes)
library(ggrepel)
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#
# install.packages("tm")                            # probably already installed
# install.packages("tidyverse")                     # probably already installed
# install.packages("ggthemes") # for nicer graphics # new
# install.packages("ggrepel")
# install.packages("cowplot")
library(tm)
library(tidyverse)
library(openNLP)
library(SnowballC)
library(ggthemes)
library(ggrepel)
getwd()
setwd("~/Desktop/CEU_text_as_data/meeting_3/") # this is an example, paste your path here
getwd()
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#
# install.packages("tm")                            # probably already installed
# install.packages("tidyverse")                     # probably already installed
# install.packages("ggthemes") # for nicer graphics # new
# install.packages("ggrepel")
# install.packages("cowplot")
library(tm)
library(tidyverse)
library(openNLP)
library(SnowballC)
library(ggthemes)
library(ggrepel)
getwd()
setwd("~/Desktop/Teaching/CEU_text_as_data/coding_practice/") # this is an example, paste your path here
federalist <- read_csv("federalist.csv")
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#
# install.packages("tm")                            # probably already installed
# install.packages("tidyverse")                     # probably already installed
# install.packages("ggthemes") # for nicer graphics # new
# install.packages("ggrepel")
# install.packages("cowplot")
library(tm)
library(tidyverse)
library(openNLP)
library(SnowballC)
library(ggthemes)
library(ggrepel)
getwd()
setwd("~/Desktop/Teaching/CEU_text_as_data/coding_practice/") # this is an example, paste your path here
federalist <- read_csv("federalist.csv")
clean_federalist <- federalist %>%
mutate(                           # the mutate() function is part of dplyr package / allows to change stuff within the dataframe easily
text   = str_to_lower(text),                # turn all letters to lowercase
text   = str_replace_all(text, "\n", " "),  # replace '/n' carriage return symbols
text   = str_remove_all(text, "[:punct:]"), # remove all punctuation
man    = str_count(text, "\\Wman "),        # Basic regex (more about it later in the course. '\\W' part means at the begging of the word) and count those up
by     = str_count(text, "\\Wby "),         # same
upon   = str_count(text, "\\Wupon ")        # same
) %>%
rowwise() %>%                                 # make future functions work rowwise
mutate(
length = length(str_split(text, " ")[[1]])  # calculate the length of the text (in words)
)
mu_madison <- clean_federalist %>%
filter(author == "MADISON") %>%
select(man, by, upon) %>%
colSums()
mu_hamilton <- clean_federalist %>%
filter(author == "HAMILTON") %>%
select(man, by, upon) %>%
colSums()
mu_jay <- clean_federalist %>%
filter(author == "JAY") %>%
select(man, by, upon) %>%
colSums()
mu_madison; mu_hamilton; mu_jay
mu_hat_hamilton <- mu_hamilton / sum(mu_hamilton)
mu_hat_madison <- mu_madison / sum(mu_madison)
mu_hat_jay <- mu_jay / sum(mu_jay)
### Disputed ###
mu_disputed <- clean_federalist[49, ] %>%
select(man, by, upon)
mu_disputed
p_disputed_hamilton <- dmultinom(mu_disputed,
prob = mu_hat_hamilton)
p_disputed_madison  <- dmultinom(mu_disputed,
prob = mu_hat_madison)
p_disputed_jay      <- dmultinom(mu_disputed,
prob = mu_hat_jay)
r = getOption("repos")
r["CRAN"] = "http://cran.us.r-project.org"
options(repos = r)
#
# install.packages("tm")                            # probably already installed
# install.packages("tidyverse")                     # probably already installed
# install.packages("ggthemes") # for nicer graphics # new
# install.packages("ggrepel")
# install.packages("cowplot")
library(tm)
library(tidyverse)
library(openNLP)
library(SnowballC)
library(ggthemes)
library(ggrepel)
getwd()
setwd("~/Desktop/Teaching/CEU_text_as_data/coding_practice/") # this is an example, paste your path here
federalist <- read_csv("federalist.csv")
clean_federalist <- federalist %>%
mutate(                           # the mutate() function is part of dplyr package / allows to change stuff within the dataframe easily
text   = str_to_lower(text),                # turn all letters to lowercase
text   = str_replace_all(text, "\n", " "),  # replace '/n' carriage return symbols
text   = str_remove_all(text, "[:punct:]"), # remove all punctuation
man    = str_count(text, "\\Wman "),        # Basic regex (more about it later in the course. '\\W' part means at the begging of the word) and count those up
by     = str_count(text, "\\Wby "),         # same
upon   = str_count(text, "\\Wupon ")        # same
) %>%
rowwise() %>%                                 # make future functions work rowwise
mutate(
length = length(str_split(text, " ")[[1]])  # calculate the length of the text (in words)
)
mu_madison <- clean_federalist %>%
filter(author == "MADISON") %>%
select(man, by, upon) %>%
colSums()
mu_hamilton <- clean_federalist %>%
filter(author == "HAMILTON") %>%
select(man, by, upon) %>%
colSums()
mu_jay <- clean_federalist %>%
filter(author == "JAY") %>%
select(man, by, upon) %>%
colSums()
mu_madison; mu_hamilton; mu_jay
mu_hat_hamilton <- mu_hamilton / sum(mu_hamilton)
mu_hat_madison <- mu_madison / sum(mu_madison)
mu_hat_jay <- mu_jay / sum(mu_jay)
### Disputed ###
mu_disputed <- clean_federalist[49, ] %>%
select(man, by, upon)
mu_disputed
p_disputed_hamilton <- dmultinom(mu_disputed,
prob = mu_hat_hamilton)
p_disputed_madison  <- dmultinom(mu_disputed,
prob = mu_hat_madison)
p_disputed_jay      <- dmultinom(mu_disputed,
prob = mu_hat_jay)
p_disputed_hamilton; p_disputed_madison; p_disputed_jay
clean_federalist_all_words <- federalist %>%
mutate(                           # the mutate() function is part of dplyr package / allows to change stuff within the dataframe easily
text   = str_to_lower(text),                # turn all letters to lowercase
text   = str_replace_all(text, "\n", " "),  # replace '/n' carriage return symbols
text   = str_remove_all(text, "[:punct:]") # remove all punctuation
) %>%
rowwise() %>%                                 # make future functions work rowwise
mutate(
length = length(str_split(text, " ")[[1]])  # calculate the length of the text (in words)
)
federalist_dtm <- DocumentTermMatrix(
clean_federalist_all_words$text
) %>% as.matrix()
hamilton_idx <- which(clean_federalist_all_words$author == "HAMILTON")
hamilton_idx
federalist_dtm[hamilton_idx,]
library(tm)
library(tidyverse)
library(ggthemes)
library(ggrepel)
getwd()
setwd("~/Desktop/teaching/CEU_text_as_data/meeting_4/")
getwd()
dir()
dir('..')
federalist <- read_csv("../meeting_3/federalist.csv")
federalist
test_string <- "hello, i like chocolate"
str_split(test_string)
str_split(test_string, " ")
clean_federalist <- federalist %>%
mutate(                           # the mutate() function is part of dplyr package / allows to change stuff within the dataframe easily
text   = str_to_lower(text),                # turn all letters to lowercase
text   = str_replace_all(text, "\n", " "),  # replace '/n' carriage return symbols
text   = str_remove_all(text, "[:punct:]"), # remove all punctuation
man    = str_count(text, "\\Wman "),        # Basic regex (more about it later in the course. '\\W' part means at the begging of the word) and count those up
by     = str_count(text, "\\Wby "),         # same
upon   = str_count(text, "\\Wupon ")        # same
) %>%
rowwise() %>%                                 # make future functions work rowwise
mutate(
length = length(str_split(text, " ")[[1]])  # calculate the length of the text (in words)
)
clean_federalist
?DocumentTermMatrix
dtm_federalist <- DocumentTermMatrix(clean_federalist$text,
control = list(removePunctuation = TRUE,
stopwords = FALSE))
dtm_federalist <- dtm_federalist %>% as.matrix()
dtm_federalist
dim(dtm_federalist)
most_frequent <- dtm_federalist %>% colSums()
most_frequent
most_frequent %>% as.list() %>% as_tibble()
?pivot_longer
most_frequent_df <- most_frequent %>% as.list() %>% as_tibble() %>%
pivot_longer(everything())
most_frequent_df
most_frequent_df %>% arrange(desc(value))
most_frequent_df %>% arrange(desc(value)) %>% print(n = 20)
most_frequent_df %>% arrange(desc(value)) %>% print(n = 20)
844 + 7867
844 + 786
most_frequent_df %>%
mutate(label = ifelse(value > 1200, name, NA))
most_frequent_df %>%
mutate(label = ifelse(value > 1200, name, NA)) %>% print(n = nrow(.))
most_frequent_df %>%
mutate(label = ifelse(value > 1200, name, NA)) %>%
ggplot() +
geom_point(aes(reorder(name, -value),  value))
most_frequent_df %>%
mutate(label = ifelse(value > 1200, name, NA)) %>%
ggplot() +
geom_point(aes(reorder(name, -value),  value)) +
geom_text_repel(aes(reorder(name, -value),  value, label = label),
max.overlaps = 20) +
theme_tufte() +
ylab("Frequency") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank()
)
most_frequent_df %>% arrange(desc(value))
most_frequent_df %>%
arrange(desc(value)) %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(rank, value)) +
geom_line()
most_frequent_df %>%
arrange(desc(value)) %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(rank, value)) +
geom_line() +
ylab("Frequency") +
xlab("Rank") +
scale_x_log10() +
scale_y_log10() +
theme_tufte()
dtm_federalist <- DocumentTermMatrix(clean_federalist$text,
control = list(removePunctuation = TRUE,
stopwords = TRUE))
dtm_federalist <- dtm_federalist %>% as.matrix()
dim(dtm_federalist)
most_frequent <- dtm_federalist %>% colSums()
most_frequent_df <- most_frequent %>% as.list() %>% as_tibble() %>%
pivot_longer(everything())
most_frequent_df %>% arrange(desc(value))
most_frequent_df %>%
mutate(label = ifelse(value > 500, name, NA)) %>%
ggplot() +
geom_point(aes(reorder(name, -value),  value)) +
geom_text_repel(aes(reorder(name, -value),  value, label = label),
max.overlaps = 20) +
theme_tufte() +
ylab("Frequency") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank()
)
most_frequent_df %>%
arrange(desc(value)) %>%
mutate(rank = 1:nrow(.)) %>%
ggplot(aes(rank, value)) +
geom_line() +
ylab("Frequency") +
xlab("Rank") +
scale_x_log10() +
scale_y_log10() +
theme_tufte()
?DocumentTermMatrix
?weightTfIdf
dtm_federalist <- DocumentTermMatrix(clean_federalist$text,
control = list(removePunctuation = TRUE,
stopwords = TRUE))
dtm_federalist_tfidf <- weightTfIdf(dtm_federalist)
dtm_federalist_tfidf <- dtm_federalist_tfidf %>% as.matrix()
dim(dtm_federalist_tfidf)
most_frequent <- dtm_federalist_tfidf %>% colSums()
most_frequent_df <- most_frequent %>% as.list() %>% as_tibble() %>%
pivot_longer(everything())
most_frequent_df %>% arrange(desc(value))
most_frequent_df %>% arrange(desc(value)) %>% print(20)
most_frequent_df %>% arrange(desc(value)) %>% print(n = 20)
most_frequent_df %>%
mutate(label = ifelse(value > .107, name, NA)) %>%
ggplot() +
geom_point(aes(reorder(name, -value),  value)) +
geom_text_repel(aes(reorder(name, -value),  value, label = label),
max.overlaps = 20) +
theme_tufte() +
ylab("tf-idf") +
theme(
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks = element_blank()
)
dtm_federalist <- DocumentTermMatrix(clean_federalist$text,
control = list(removePunctuation = TRUE,
stopwords = TRUE))
dtm_federalist_tfidf <- weightTfIdf(dtm_federalist)
clean_federalist$author
clean_federalist$author == "HAMILTON"
which(clean_federalist$author == "HAMILTON")
hamilton_ids <- which(clean_federalist$author == "HAMILTON")
madison_ids <- which(clean_federalist$author == "MADISON")
hamilton_ids
madison_ids
dtm_federalist_tfidf
test_matrix <- matrix()
test_matrix <- matrix(c(1, 2, 3, 4,5 , 6, 7, 8, 9, 10), nrow = 5)
test_matrix
test_matrix[4, 1]
test_matrix[1:3, 1]
test_matrix[c(1, 2, 5), 1]
test_matrix[c(1, 2, 5), 2]
test_matrix[c(1, 2, 5), c(1, 2)]
test_matrix[c(1, 2, 5), ]
ids_that_i_need <- c(1, 2, 5)
ids_that_i_need
test_matrix[ids_that_i_need, ]
dtm_federalist_tfidf
dtm_federalist_tfidf %>% as.matrix()
most_frequent_hamilton <- dtm_federalist_tfidf[hamilton_ids, ] %>%
as.matrix() %>% colSums()
most_frequent_madison <- dtm_federalist_tfidf[madison_ids, ] %>%
as.matrix() %>% colSums()
most_frequent_hamilton
most_frequent_hamilton %>%
as.list()
most_frequent_hamilton %>%
as.list() %>%
as_tibble()
most_frequent_hamilton %>%
as.list() %>%
as_tibble() %>%
pivot_longer(everything())
most_frequent_df_hamilton <- most_frequent_hamilton %>%
as.list() %>%
as_tibble() %>%
pivot_longer(everything()) %>%
mutate(author = "HAMILTON")
most_frequent_df_hamilton
most_frequent_df_madison <- most_frequent_madison %>%
as.list() %>%
as_tibble() %>%
pivot_longer(everything()) %>%
mutate(author = "MADISON")
most_frequent_df_madison
most_frequent_df <- bind_rows(most_frequent_df_hamilton,
most_frequent_df_madison)
most_frequent_df
most_frequent_df %>% count(author)
most_frequent_df %>%
filter(author == "HAMILTON")
most_frequent_df %>%
filter(author == "HAMILTON") %>%
top_n(20, value)
hamilton_plot <- most_frequent_df %>%
filter(author == "HAMILTON") %>%
top_n(20, value) %>%
ggplot() +
geom_bar(aes(reorder(name, value), value),
stat = "identity",
fill = "steelblue") +
coord_flip() +
ylab("ti-idf") +
theme_tufte() +
theme(axis.title.y = element_blank())
hamilton_plot <- most_frequent_df %>%
filter(author == "HAMILTON") %>%
top_n(20, value) %>%
ggplot() +
geom_bar(aes(reorder(name, value), value),
stat = "identity",
fill = "steelblue") +
coord_flip() +
ylab("ti-idf") +
theme_tufte() +
theme(axis.title.y = element_blank())
hamilton_plot
hamilton_plot <- most_frequent_df %>%
filter(author == "HAMILTON") %>%
top_n(20, value) %>%
ggplot() +
geom_bar(aes(reorder(name, value), value),
stat = "identity",
fill = "steelblue") +
coord_flip() +
ylab("ti-idf") +
theme_tufte() +
theme(axis.title.y = element_blank())
madison_plot <- most_frequent_df %>%
filter(author == "MADISON") %>%
top_n(20, value) %>%
ggplot() +
geom_bar(aes(reorder(name, value), value),
stat = "identity",
fill = "indianred4") +
coord_flip() +
ylab("ti-idf") +
theme_tufte() +
theme(axis.title.y = element_blank())
cowplot::plot_grid(hamilton_plot, madison_plot,
ncol = 2)
dtm_federalist <- DocumentTermMatrix(clean_federalist$text,
control = list(removePunctuation = TRUE,
stopwords = TRUE))
hamilton_ids <- which(clean_federalist$author == "HAMILTON")
madison_ids <- which(clean_federalist$author == "MADISON")
dtm_hamilton <- dtm_federalist[hamilton_ids, ] %>%
as.matrix() %>% colSums()
freq_hamilton <- (dtm_hamilton + 1) / sum(dtm_hamilton + 1)  # laplace smoothing
freq_hamilton
sum(dtm_hamilton + 1)
dtm_madison <- dtm_federalist[madison_ids, ] %>%
as.matrix() %>% colSums()
freq_madison <- (dtm_madison + 1) / sum(dtm_madison + 1)  # laplace smoothing
freq_madison
log_odds <- function(x) {
log(x / (1 - x))
}
log_odds_ham <- log_odds(freq_hamilton)
log_odds_mad <- log_odds(freq_madison)
log_odds_ham
log_odds_mad
freq_hamilton
log_odds_ham
freq_hamilton
log_odds_ham
freq_madison <- (dtm_madison) / sum(dtm_madison)  # laplace smoothing
log_odds_mad <- log_odds(freq_madison)
log_odds_mad
log(0)
freq_madison <- (dtm_madison + 1) / sum(dtm_madison + 1)  # laplace smoothing
log_odds <- function(x) {
log(x / (1 - x))
}
log_odds_ham <- log_odds(freq_hamilton)
log_odds_mad <- log_odds(freq_madison)
log_odds_ratio <- log_odds_ham - log_odds_mad
length(log_odds_ham)
length(log_odds_ratio)
log_odds_ratio
log_odds_ratio <- log_odds_ratio %>%
as.list() %>%
as_tibble() %>%
pivot_longer(everything())
log_odds_ratio
general_frequency <- dtm_federalist %>% as.matrix() %>% colSums() %>%
as.list() %>%
as_tibble() %>%
pivot_longer(everything()) %>%
mutate(freq = value) %>%
select(-value)
general_frequency
log_odds_ratio <- log_odds_ratio %>%
left_join(general_frequency)
log_odds_ratio
log_odds_ratio %>%
mutate(label = ifelse(value > 2 | value < -2, name, NA))
log_odds_ratio %>%
mutate(label = ifelse(value > 2 | value < -2, name, NA)) %>% print(n = nrow(.))
log_odds_ratio %>%
mutate(label = ifelse(value > 2 | value < -2, name, NA)) %>%
ggplot() +
geom_point(aes(freq, value, color = value)) +
geom_text_repel(aes(freq, value, label = label),
max.overlaps = 50) +
ylab("log odds ratio") +
theme_tufte() +
theme(legend.position = "none")
hamilton_plot <- log_odds_ratio %>%
top_n(20, value) %>%
ggplot() +
geom_bar(aes(reorder(name, value), value),
stat = "identity",
fill = "steelblue") +
coord_flip() +
ylab("log odds ratio") +
theme_tufte() +
theme(axis.title.y = element_blank())
madison_plot <- log_odds_ratio %>%
top_n(20, -value) %>%
ggplot() +
geom_bar(aes(reorder(name, -value), value),
stat = "identity",
fill = "indianred4") +
coord_flip() +
ylab("log odds ratio") +
theme_tufte() +
theme(axis.title.y = element_blank())
cowplot::plot_grid(hamilton_plot, madison_plot,
ncol = 2)
cowplot::plot_grid(madison_plot, hamilton_plot,
ncol = 2)
