require(tidyverse)
#install.packages("googledrive")
#install.packages("googlesheets4")
library(googledrive)
library(googlesheets4)
# Authentication
drive_auth(email ="petrotolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
#install.packages("googledrive")
#install.packages("googlesheets4")
library(googledrive)
library(googlesheets4)
# Authentication
drive_auth(email ="petrotolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
?drive_auth
?gs4_auth
?drive_token
drive_deauth()
# Authentication
drive_auth(email ="petrotolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
drive_auth_configure()
?drive_auth_configure
drive_oauth_client()
rive_api_key()
drive_api_key()
drive_scopes()
# Authentication
drive_auth(email ="petrotolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
#install.packages("googledrive")
#install.packages("googlesheets4")
library(googledrive)
library(googlesheets4)
# Authentication
drive_auth(email ="fabienne.lind@gmail.com")
# Authentication
drive_auth(email ="petro.tolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
# Authentication
drive_auth(email ="petro.tolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
sheet_id1<- gs4_create("intercoder_set_coder1",sheets = intercoder_set_coder1)
intercoder_set_coder1 <- intercoder_set
intercoder_set <- intercoder_set %>%
mutate(actors_m = "") %>%
select(id, actors_m, headline)
require(tidyverse)
intercoder_set <- intercoder_set %>%
mutate(actors_m = "") %>%
select(id, actors_m, headline)
set.seed(57) # setting a seed ensures that the random selection can be repeated in the same way
intercoder_set <- articles_en %>%
sample_n(10)
require(tidyverse)
articles_en <- read_csv("~/Desktop/Teaching/CEU_text_as_data/meeting_5/headlines.csv")
politicians <- c("tony blair", "gordon brown", "david cameron", "theresa may", "boris johnson", "prime minister")
parties <- c("conservative party", "\\stor(y|ies)","ukip","labour party", "liberal democrats", "scottish national party", "green party")
dict_name <- c("politicians", "parties")
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
# Function to count keywords in a text
library(stringi)
count_keywords <- function(text, keywords) {
keyword_counts <- sapply(keywords, function(keyword) {
pattern <- paste0("(?i)", keyword, "\\b")  # Adding case-insensitive flag (pattern will match both uppercase and lowercase versions of the keyword)
keyword_count <- stri_count_regex(text, pattern)
return(keyword_count)
})
return(keyword_counts)
}
articles_en$politicians_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], politicians)))
articles_en$parties_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], parties)))
table(articles_en$politicians_count)
table(articles_en$parties_count)
check_keywords <- function(text, keywords) {
found_keywords <- keywords[stri_detect_regex(text, paste0("(?i)\\b", keywords, "\\b"))]
return(paste(found_keywords, collapse = ", "))
}
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
articles_en <- articles_en %>%
mutate(
actors_d = case_when(
parties_count >= 1 | politicians_count >= 1 ~ 1,
TRUE ~ 0
),
actors_d = if_else(is.na(actors_d), 0, actors_d)
)
table(articles_en$actors_d) # descriptive overview
set.seed(57) # setting a seed ensures that the random selection can be repeated in the same way
intercoder_set <- articles_en %>%
sample_n(10)
intercoder_set <- intercoder_set %>%
mutate(actors_m = "") %>%
select(id, actors_m, headline)
intercoder_set_coder1 <- intercoder_set
intercoder_set_coder1$coder_name <- "Coder1"
intercoder_set_coder2 <- intercoder_set
intercoder_set_coder2$coder_name <- "Coder2"
#install.packages("googledrive")
#install.packages("googlesheets4")
library(googledrive)
library(googlesheets4)
# Authentication
drive_auth(email ="petro.tolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
sheet_id1<- gs4_create("intercoder_set_coder1",sheets = intercoder_set_coder1)
sheet_id2<- gs4_create("intercoder_set_coder2",sheets = intercoder_set_coder2)
require(tidyverse)
articles_en <- read_csv("~/Desktop/Teaching/CEU_text_as_data/meeting_5/headlines.csv")
politicians <- c("tony blair", "gordon brown", "david cameron", "theresa may", "boris johnson", "prime minister")
parties <- c("conservative party", "\\stor(y|ies)","ukip","labour party", "liberal democrats", "scottish national party", "green party")
dict_name <- c("politicians", "parties")
articles_en <- articles_en %>%
mutate(headline = str_to_lower(headline))
head(articles_en$headline)
# Function to count keywords in a text
library(stringi)
count_keywords <- function(text, keywords) {
keyword_counts <- sapply(keywords, function(keyword) {
pattern <- paste0("(?i)", keyword, "\\b")  # Adding case-insensitive flag (pattern will match both uppercase and lowercase versions of the keyword)
keyword_count <- stri_count_regex(text, pattern)
return(keyword_count)
})
return(keyword_counts)
}
articles_en$politicians_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], politicians)))
articles_en$parties_count <- apply(articles_en, 1, function(row) sum(count_keywords(row["headline"], parties)))
table(articles_en$politicians_count)
table(articles_en$parties_count)
check_keywords <- function(text, keywords) {
found_keywords <- keywords[stri_detect_regex(text, paste0("(?i)\\b", keywords, "\\b"))]
return(paste(found_keywords, collapse = ", "))
}
articles_en$politicians_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], politicians))
articles_en$parties_keywords_found <- apply(articles_en, 1, function(row) check_keywords(row["headline"], parties))
table(articles_en$politicians_keywords_found)
table(articles_en$parties_keywords_found)
articles_en <- articles_en %>%
mutate(
actors_d = case_when(
parties_count >= 1 | politicians_count >= 1 ~ 1,
TRUE ~ 0
),
actors_d = if_else(is.na(actors_d), 0, actors_d)
)
table(articles_en$actors_d) # descriptive overview
set.seed(57) # setting a seed ensures that the random selection can be repeated in the same way
intercoder_set <- articles_en %>%
sample_n(10)
intercoder_set <- intercoder_set %>%
mutate(actors_m = "") %>%
select(id, actors_m, headline)
intercoder_set_coder1 <- intercoder_set
intercoder_set_coder1$coder_name <- "Coder1"
intercoder_set_coder2 <- intercoder_set
intercoder_set_coder2$coder_name <- "Coder2"
#install.packages("googledrive")
#install.packages("googlesheets4")
library(googledrive)
library(googlesheets4)
# Authentication
drive_auth(email ="petro.tolochko@gmail.com")
gs4_auth(token = drive_token())
drive_user()
sheet_id1<- gs4_create("intercoder_set_coder1",sheets = intercoder_set_coder1)
sheet_id2<- gs4_create("intercoder_set_coder2",sheets = intercoder_set_coder2)
sheet_id1
intercoder_set_coder1c <- read_sheet(sheet_id1)
intercoder_set_coder2c <- read_sheet(sheet_id2)
intercoder_set_coder1c
reliability_set <- rbind(intercoder_set_coder1c, intercoder_set_coder2c)
reliability_set
reliability_restructured <- dcast(reliability_set, id ~ coder_name, value.var="actors_m")
?dcast
install.packages("reshape2")
require(reshape2)
?dcast
dcast(reliability_set, id ~ coder_name, value.var="actors_m")
?pivot_wider
reliability_set %>%
pivot_wider(names_from = coder_name)
reliability_set %>%
pivot_wider(names_from = coder_name,
values_from = actors_m)
reliability_set %>%
pivot_wider(names_from = coder_name,
values_from = actors_m) %>%
select(-headline)
reliability_transp <- t(reliability_restructured) # transpose data frames (rows to columns, columns to rows)
reliability_restructured <- reliability_set %>%
pivot_wider(names_from = coder_name,
values_from = actors_m) %>%
select(-headline)
reliability_transp <- t(reliability_restructured) # transpose data frames (rows to columns, columns to rows)
reliability_matrix <- data.matrix(reliability_transp) # convert df.t to matrix
reliability_matrix_final <- reliability_matrix[-1,] # delete first row of matrix
reliability_matrix_final
